import base64
exec(base64.b64decode("aW1wb3J0IHJlcXVlc3RzCmltcG9ydCBqc29uCmltcG9ydCB0aW1lCmltcG9ydCBvcwoKZGVmIGNsZWFyX2NvbnNvbGUoKToKICAgIG9zLnN5c3RlbSgnY2xzJyBpZiBvcy5uYW1lID09ICdudCcgZWxzZSAnY2xlYXInKQoKZGVmIGxvZyhtZXNzYWdlKToKICAgIHByaW50KGYiW0lORk9dIHttZXNzYWdlfSIpCgpkZWYgd2VsY29tZV9tZXNzYWdlKCk6CiAgICBwcmludCgiIiIKICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKICAgICMgICDwn5qAIFdlbGNvbWUgdG8gdGhlICNBaWRyb3BJRCBTdG9yayBDaGVja2VyISDwn5qAICAjCiAgICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjCiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgICAiIiIpCgpkZWYgbG9hZF9wcm94aWVzKCk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cygicHJveHkudHh0Iik6CiAgICAgICAgd2l0aCBvcGVuKCJwcm94eS50eHQiLCAiciIpIGFzIGZpbGU6CiAgICAgICAgICAgIHByb3hpZXMgPSBmaWxlLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICByZXR1cm4gcHJveGllcyBpZiBwcm94aWVzIGVsc2UgTm9uZQogICAgcmV0dXJuIE5vbmUKCmRlZiBnZXRfcHJveHkocHJveGllcyk6CiAgICByZXR1cm4geyJodHRwIjogcHJveGllc1swXSwgImh0dHBzIjogcHJveGllc1swXX0gaWYgcHJveGllcyBlbHNlIE5vbmUKCmRlZiByZXF1ZXN0X3dpdGhfcmV0cnkodXJsLCBtZXRob2Q9ImdldCIsIGhlYWRlcnM9Tm9uZSwgZGF0YT1Ob25lLCBwcm94aWVzPU5vbmUsIHJldHJpZXM9Myk6CiAgICBmb3IgYXR0ZW1wdCBpbiByYW5nZShyZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucmVxdWVzdChtZXRob2QsIHVybCwgaGVhZGVycz1oZWFkZXJzLCBqc29uPWRhdGEsIHByb3hpZXM9Z2V0X3Byb3h5KHByb3hpZXMpLCB0aW1lb3V0PTEwKQogICAgICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpCiAgICAgICAgICAgIGxvZyhmIuKdjCBSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9LiBSZXRyeWluZy4uLiAoe2F0dGVtcHQgKyAxfS97cmV0cmllc30pIikKICAgICAgICBleGNlcHQgcmVxdWVzdHMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2coZiLinYwgTmV0d29yayBlcnJvcjoge2V9LiBSZXRyeWluZy4uLiAoe2F0dGVtcHQgKyAxfS97cmV0cmllc30pIikKICAgICAgICB0aW1lLnNsZWVwKDIgKiogYXR0ZW1wdCkKICAgIHJldHVybiBOb25lCgpkZWYgZ2V0X2FjY2Vzc190b2tlbihyZWZyZXNoX3Rva2VuLCBwcm94aWVzKToKICAgIHVybCA9ICJodHRwczovL3N0b3JrLXByb2QtYXBwcy5hdXRoLmFwLW5vcnRoZWFzdC0xLmFtYXpvbmNvZ25pdG8uY29tL29hdXRoMi90b2tlbiIKICAgIGRhdGEgPSB7CiAgICAgICAgImdyYW50X3R5cGUiOiAicmVmcmVzaF90b2tlbiIsCiAgICAgICAgImNsaWVudF9pZCI6ICI1bXNuczRuNDlobWczZGZ0cDJ0cDF0Mml1aCIsCiAgICAgICAgInJlZnJlc2hfdG9rZW4iOiByZWZyZXNoX3Rva2VuCiAgICB9CiAgICBoZWFkZXJzID0geyJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIn0KICAgIGxvZygi8J+UhCBSZWZyZXNoaW5nIGFjY2VzcyB0b2tlbi4uLiIpCiAgICByZXNwb25zZSA9IHJlcXVlc3Rfd2l0aF9yZXRyeSh1cmwsICJwb3N0IiwgaGVhZGVycywgZGF0YSwgcHJveGllcykKICAgIHJldHVybiByZXNwb25zZS5nZXQoImFjY2Vzc190b2tlbiIpIGlmIHJlc3BvbnNlIGVsc2UgTm9uZQoKZGVmIGNoZWNrX3Rva2VuX3ZhbGlkaXR5KHRva2VuLCBwcm94aWVzKToKICAgIHVybCA9ICJodHRwczovL2FwcC1hcGkuanAuc3Rvcmstb3JhY2xlLm5ldHdvcmsvdjEvbWUiCiAgICBoZWFkZXJzID0geyJBdXRob3JpemF0aW9uIjogZiJCZWFyZXIge3Rva2VufSJ9CiAgICByZXNwb25zZSA9IHJlcXVlc3Rfd2l0aF9yZXRyeSh1cmwsICJnZXQiLCBoZWFkZXJzLCBOb25lLCBwcm94aWVzKQogICAgaWYgcmVzcG9uc2U6CiAgICAgICAgZW1haWwgPSByZXNwb25zZVsiZGF0YSJdLmdldCgiZW1haWwiLCAiVW5rbm93biIpCiAgICAgICAgdmFsaWRfY291bnQgPSByZXNwb25zZVsiZGF0YSJdWyJzdGF0cyJdLmdldCgic3Rvcmtfc2lnbmVkX3ByaWNlc192YWxpZF9jb3VudCIsIDApCiAgICAgICAgaW52YWxpZF9jb3VudCA9IHJlc3BvbnNlWyJkYXRhIl1bInN0YXRzIl0uZ2V0KCJzdG9ya19zaWduZWRfcHJpY2VzX2ludmFsaWRfY291bnQiLCAwKQogICAgICAgIGxvZyhmIuKchSBWYWxpZCBUb2tlbiAtIEVtYWlsOiB7ZW1haWx9IHwgVmFsaWQ6IHt2YWxpZF9jb3VudH0gfCBJbnZhbGlkOiB7aW52YWxpZF9jb3VudH0iKQogICAgICAgIHJldHVybiBUcnVlLCBlbWFpbAogICAgcmV0dXJuIEZhbHNlLCBOb25lCgpkZWYgZ2V0X3NpZ25lZF9wcmljZSh0b2tlbiwgcHJveGllcyk6CiAgICB1cmwgPSAiaHR0cHM6Ly9hcHAtYXBpLmpwLnN0b3JrLW9yYWNsZS5uZXR3b3JrL3YxL3N0b3JrX3NpZ25lZF9wcmljZXMiCiAgICBoZWFkZXJzID0geyJBdXRob3JpemF0aW9uIjogZiJCZWFyZXIge3Rva2VufSJ9CiAgICByZXNwb25zZSA9IHJlcXVlc3Rfd2l0aF9yZXRyeSh1cmwsICJnZXQiLCBoZWFkZXJzLCBOb25lLCBwcm94aWVzKQogICAgaWYgcmVzcG9uc2U6CiAgICAgICAgbXNnX2hhc2ggPSBuZXh0KCh2WyJ0aW1lc3RhbXBlZF9zaWduYXR1cmUiXVsibXNnX2hhc2giXSBmb3IgdiBpbiByZXNwb25zZVsiZGF0YSJdLnZhbHVlcygpKSwgTm9uZSkKICAgICAgICBsb2coZiLwn5OcIFNpZ25lZCBQcmljZSBSZXRyaWV2ZWQ6IHttc2dfaGFzaH0iKQogICAgICAgIHJldHVybiBtc2dfaGFzaAogICAgcmV0dXJuIE5vbmUKCmRlZiB2YWxpZGF0ZV9zaWduZWRfcHJpY2UodG9rZW4sIG1zZ19oYXNoLCBwcm94aWVzKToKICAgIHVybCA9ICJodHRwczovL2FwcC1hcGkuanAuc3Rvcmstb3JhY2xlLm5ldHdvcmsvdjEvc3Rvcmtfc2lnbmVkX3ByaWNlcy92YWxpZGF0aW9ucyIKICAgIGhlYWRlcnMgPSB7IkF1dGhvcml6YXRpb24iOiBmIkJlYXJlciB7dG9rZW59IiwgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIn0KICAgIGRhdGEgPSB7Im1zZ19oYXNoIjogbXNnX2hhc2gsICJ2YWxpZCI6IFRydWV9CiAgICByZXNwb25zZSA9IHJlcXVlc3Rfd2l0aF9yZXRyeSh1cmwsICJwb3N0IiwgaGVhZGVycywgZGF0YSwgcHJveGllcykKICAgIGlmIHJlc3BvbnNlOgogICAgICAgIGxvZygi4pyFIFZhbGlkYXRpb24gc3VjY2Vzc2Z1bCEiKQoKZGVmIG1haW4oKToKICAgIGNsZWFyX2NvbnNvbGUoKQogICAgd2VsY29tZV9tZXNzYWdlKCkKICAgIHVzZV9wcm94eSA9IGlucHV0KCJEbyB5b3Ugd2FudCB0byB1c2UgcHJveHk/ICh5L24pOiAiKS5zdHJpcCgpLmxvd2VyKCkgPT0gInkiCiAgICBwcm94aWVzID0gbG9hZF9wcm94aWVzKCkgaWYgdXNlX3Byb3h5IGVsc2UgTm9uZQogICAgCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGNsZWFyX2NvbnNvbGUoKQogICAgICAgIGxvZygi8J+agCBTdGFydGluZyBwcm9jZXNzLi4uIikKICAgICAgICAKICAgICAgICB3aXRoIG9wZW4oInRva2VuLnR4dCIsICJyIikgYXMgdG9rZW5fZmlsZSwgb3BlbigicmVmcmVzaC50eHQiLCAiciIpIGFzIHJlZnJlc2hfZmlsZToKICAgICAgICAgICAgdG9rZW5zLCByZWZyZXNoX3Rva2VucyA9IHRva2VuX2ZpbGUucmVhZCgpLnNwbGl0bGluZXMoKSwgcmVmcmVzaF9maWxlLnJlYWQoKS5zcGxpdGxpbmVzKCkKICAgICAgICAKICAgICAgICB1cGRhdGVkX3Rva2VucyA9IFtdCiAgICAgICAgZm9yIGksIHRva2VuIGluIGVudW1lcmF0ZSh0b2tlbnMpOgogICAgICAgICAgICBsb2coZiJcbvCflI0gUHJvY2Vzc2luZyBUb2tlbiB7aSsxfS4uLiIpCiAgICAgICAgICAgIHZhbGlkLCBlbWFpbCA9IGNoZWNrX3Rva2VuX3ZhbGlkaXR5KHRva2VuLCBwcm94aWVzKQogICAgICAgICAgICBpZiBub3QgdmFsaWQ6CiAgICAgICAgICAgICAgICBsb2coIvCflIQgVG9rZW4gaW52YWxpZCwgYXR0ZW1wdGluZyByZWZyZXNoLi4uIikKICAgICAgICAgICAgICAgIHRva2VuID0gZ2V0X2FjY2Vzc190b2tlbihyZWZyZXNoX3Rva2Vuc1tpXSwgcHJveGllcykgb3IgdG9rZW4KICAgICAgICAgICAgdXBkYXRlZF90b2tlbnMuYXBwZW5kKHRva2VuKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbXNnX2hhc2ggOj0gZ2V0X3NpZ25lZF9wcmljZSh0b2tlbiwgcHJveGllcyk6CiAgICAgICAgICAgICAgICB2YWxpZGF0ZV9zaWduZWRfcHJpY2UodG9rZW4sIG1zZ19oYXNoLCBwcm94aWVzKQogICAgICAgIAogICAgICAgIHdpdGggb3BlbigidG9rZW4udHh0IiwgInciKSBhcyB0b2tlbl9maWxlOgogICAgICAgICAgICB0b2tlbl9maWxlLndyaXRlKCJcbiIuam9pbih1cGRhdGVkX3Rva2VucykpCiAgICAgICAgCiAgICAgICAgbG9nKCLij7MgUHJvY2VzcyBjb21wbGV0ZWQuIFNsZWVwaW5nIGZvciAyMCBzZWNvbmRzLi4uIikKICAgICAgICB0aW1lLnNsZWVwKDIwKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQ==").decode())
